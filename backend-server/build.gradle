plugins {
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "net.ltgt.apt-eclipse" version "0.18"
    id "net.ltgt.apt-idea" version "0.18"	
    id 'jacoco'
    id 'com.bmuschko.docker-remote-api' version '3.6.2'
}

apply plugin:"application"
apply plugin:"java"
apply from: 'build.eclipse.gradle'

version "0.1"
group "com.lumpy.server"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

sourceSets {
	main {
		java      {srcDir 'src/main/java'}
		resources {srcDir 'src/main/java'}
	}
	test {
		java      {srcDir 'src/test/java'}
		resources {srcDir 'src/test/java'}
	}
	integrationTest {
		runtimeClasspath += test.runtimeClasspath
		java      {srcDir 'src/integration/java'}
		resources {srcDir 'src/integration/java'}
	}
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:1.0.1")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    implementation platform("io.micronaut:micronaut-bom:1.0.1")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"

    compileOnly "io.micronaut:micronaut-inject-java"
    runtime "ch.qos.logback:logback-classic:1.2.3"

    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.12"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly "io.micronaut:micronaut-inject-java"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "com.lumpy.server.Application"
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}


task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
    destFile = project.file("${buildDir}/Dockerfile")
    from 'openjdk:11-jre'
	runCommand 'apt-get install curl'
	copyFile 'libs/*jar', 'backend-server.jar'
	label(['maintainer': 'Erik Lumpkin "elfdude@yahoo.com"', 'biking-forecase-local-dev':'true'])
	exposePort 8080
    defaultCommand 'java', '-jar', 'backend-server.jar'
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    dependsOn createDockerfile, assemble
    inputDir = createDockerfile.destFile.parentFile
    inputs.files(createDockerfile.destFile, assemble.outputs)
    outputs.file("${buildDir}/dockerImage.built")
    tag = 'biking-forecast-backend-server:latest'
    doLast {
    	ant.touch(file:"${buildDir}/dockerImage.built")
    }
}

task saveImage(type: com.bmuschko.gradle.docker.tasks.image.DockerSaveImage) {
	dependsOn buildImage
	destFile = file('build/dockerImageFile.tar')
	repository = 'biking-forecast-backend-server'
	tag = 'latest'
	useCompression = true
}